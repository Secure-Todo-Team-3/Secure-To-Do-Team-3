name: Backend Deploy (Spring Boot JAR)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  EB_APP_NAME: todoapp-TodoApp
  EB_ENV_NAME: todoapp-TodoApp-Env
  AWS_REGION: eu-west-1

jobs:
  deploy:
    name: "Build and Deploy Spring Boot JAR"
    runs-on: ubuntu-latest

    permissions:
      id-token: write   
      contents: read    

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Build Spring Boot Application
       
        run: mvn clean package -DskipTests
        working-directory: ./secure-team-3-todo-api 

      - name: Create Deployment Package
        run: |
          # Find the generated JAR file in the target directory
          JAR_FILE=$(find secure-team-3-todo-api/target -name "*.jar" -type f | head -n 1)
          
          if [ -z "$JAR_FILE" ]; then
            echo "Error: Spring Boot JAR file not found after build."
            exit 1
          fi
          
          # Create a clean deployment directory
          mkdir -p deployment
          
          # Copy the JAR file and rename it to 'application.jar' for consistency
          cp "$JAR_FILE" "deployment/application.jar"
          
          echo "Created deployment package with application.jar"

      - name: Configure AWS Credentials
      
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::263883060207:role/github-actions-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to Elastic Beanstalk
        
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          application_name: ${{ env.EB_APP_NAME }}
          environment_name: ${{ env.EB_ENV_NAME }}
          version_label: github-sha-${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}
          deployment_package: deployment/application.zip
          region: ${{ env.AWS_REGION }}
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}