name: Backend Deploy (Spring Boot)

on:
  push:
    branches:
      - main
    paths:
      - 'secure-team-3-todo-api/**' 
      - 'db/**'                    
      - 'terraform/app_source/Dockerrun.aws.json' 

env:
  EB_APP_NAME: TodoApp
  EB_ENV_NAME: TodoApp-Env
  AWS_REGION: eu-west-1
  RDS_DB_INSTANCE_IDENTIFIER: todo-team-db

jobs:
  deploy:
    name: "Build and Deploy Spring Boot App"
    runs-on: ubuntu-latest 

    permissions:
      id-token: write   
      contents: read    

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4 
        with:
          role-to-assume: arn:aws:iam::263883060207:role/github-actions-deploy-role 
          aws-region: ${{ env.AWS_REGION }} 

      - name: Get RDS DB Endpoint
        id: rds_endpoint_step 
        run: |
          # Use AWS CLI to get the RDS endpoint and store it in GITHUB_ENV
          DB_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier ${{ env.RDS_DB_INSTANCE_IDENTIFIER }} \
            --query 'DBInstances[0].Endpoint.Address' \
            --output text)
          echo "DB_ENDPOINT=$DB_ENDPOINT" >> "$GITHUB_ENV"
          echo "Fetched RDS DB Endpoint: $DB_ENDPOINT"

      - name: Setup Java for Build and Migration
        uses: actions/setup-java@v4 
        with:
          java-version: '21'        
          distribution: 'temurin'   
          cache: 'maven'            

      - name: Run Flyway Migrations
       
        run: |
          cd secure-team-3-todo-api/
          mvn clean flyway:migrate \
            -Dflyway.url="${{ secrets.DATABASE_URL }}" \
            -Dflyway.user="${{ secrets.DB_USERNAME }}" \
            -Dflyway.password="${{ secrets.DB_PASSWORD }}" \
            -Dflyway.locations="filesystem:../db"
        

      - name: Build Spring Boot Application
       
        run: |
          cd secure-team-3-todo-api/
          mvn clean install

      - name: Create EB Deployment Bundle
        
        run: |
          # Create a temporary staging directory for the bundle
          BUILD_BUNDLE_DIR="eb-bundle-staging"
          mkdir -p "$BUILD_BUNDLE_DIR"

          # 1. Find the compiled JAR file
          # Navigate to the secure-team-3-todo-api directory to perform the search
          cd secure-team-3-todo-api/
          JAR_FILE=$(find target -name "*.jar" -type f -print -quit)
          if [ -z "$JAR_FILE" ]; then
            echo "Error: Spring Boot JAR file not found in target/ within secure-team-3-todo-api/."
            exit 1
          fi
          echo "Found JAR: $JAR_FILE"

          # Copy the JAR file to the staging directory at the repository root
          # We rename it to 'application.jar' as this is a common convention for Docker images
          cp "$JAR_FILE" "${GITHUB_WORKSPACE}/$BUILD_BUNDLE_DIR/application.jar"
          
          # 2. Navigate back to the repository root for correct pathing to Dockerrun.aws.json
          cd "$GITHUB_WORKSPACE"

          # Define the path to Dockerrun.aws.json relative to the repository root
          DOCKERRUN_REPO_PATH="terraform/app_source/Dockerrun.aws.json"
          if [ ! -f "$DOCKERRUN_REPO_PATH" ]; then
            echo "Error: Dockerrun.aws.json not found at $DOCKERRUN_REPO_PATH."
            exit 1
          fi
          echo "Found Dockerrun.aws.json at: $DOCKERRUN_REPO_PATH"

          # 3. Copy Dockerrun.aws.json to the staging directory
          cp "$DOCKERRUN_REPO_PATH" "$BUILD_BUNDLE_DIR/"

          # 4. Create the final 'application.zip' from the contents of the staging directory
          # The '-j' option (junk paths) is crucial here; it tells zip to store only the filename,
          # not the full path, ensuring 'application.jar' and 'Dockerrun.aws.json' are at the zip root.
          zip -j application.zip "$BUILD_BUNDLE_DIR"/*
          echo "Created application.zip at repository root ($GITHUB_WORKSPACE/application.zip)."

      - name: Deploy to Elastic Beanstalk
        uses: aws/elastic-beanstalk-action@v1 
        with:
          
          application_name: ${{ env.EB_APP_NAME }}
          environment_name: ${{ env.EB_ENV_NAME }}
          version_label: github-sha-${{ github.sha }}
          deployment_package: application.zip 